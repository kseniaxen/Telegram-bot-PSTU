from aiogram import Router, types, Bot, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from config import Config
from .states import OperatorStates
from utils import load_texts

TEXTS = load_texts()
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {user_id: {"support_msg_id": int, "question": str, "username": str}}
user_questions = {}


@router.message(F.text == TEXTS["buttons"]["operator"])
async def request_operator(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"""
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OperatorStates.waiting_question)
    await state.update_data(start_time=message.date.timestamp())


@router.message(OperatorStates.waiting_question)
async def process_user_question(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    wait_time = int(message.date.timestamp() - user_data['start_time'])

    username = message.from_user.username or f"ID: {message.from_user.id}"

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            types.InlineKeyboardButton(
                text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"answer_{message.from_user.id}"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=f"close_{message.from_user.id}"
            )
        )
        keyboard.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_msg = await bot.send_message(
            chat_id=Config.SUPPORT_TEAM_CHAT_ID,
            text=f"üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                 f"üë§ –ò–º—è: @{username}\n"
                 f"üÜî ID: {message.from_user.id}\n"
                 f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {wait_time} —Å–µ–∫.\n"
                 f"‚ùì –í–æ–ø—Ä–æ—Å:\n{message.text}",
            reply_markup=keyboard.as_markup()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_questions[message.from_user.id] = {
            "support_msg_id": support_msg.message_id,
            "question": message.text,
            "username": username,
            "user_id": message.from_user.id
        }

        await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∑–¥–µ—Å—å.")
        await state.set_state(OperatorStates.user_waiting)

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    user_id = int(callback.data.split("_")[1])

    if user_id not in user_questions:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(OperatorStates.operator_typing)
    await state.update_data(
        target_user_id=user_id,
        original_message_id=callback.message.message_id
    )

    # –ü—Ä–æ—Å–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ @{user_questions[user_id]['username']} (ID: {user_id})\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {user_questions[user_id]['question']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )

    await callback.answer()


@router.callback_query(F.data.startswith("close_"))
async def handle_close_callback(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å' —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    operator_name = callback.from_user.full_name
    user_id = int(callback.data.split("_")[1])

    if user_id not in user_questions:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return

    try:
        question_data = user_questions[user_id]

        # 1. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚ÑπÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
                     f"‚ùì –í–æ–ø—Ä–æ—Å: {question_data['question']}\n\n"
                     f"–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, "
                     f"–≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
            )
        except Exception:
            pass  # –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        # 2. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await callback.message.edit_text(
            text=f"‚ùå –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {operator_name}\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{question_data['username']}\n"
                 f"üÜî ID: {user_id}\n"
                 f"‚ùì –í–æ–ø—Ä–æ—Å: {question_data['question']}",
            reply_markup=None
        )

        # 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        del user_questions[user_id]

        # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await callback.answer("–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç", show_alert=False)

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await callback.message.answer(
            f"‚úÖ –í—ã –∑–∞–∫—Ä—ã–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{question_data['username']}",
            reply_to_message_id=callback.message.message_id
        )

    except Exception:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)


@router.message(OperatorStates.user_waiting)
async def notify_user_waiting(message: types.Message):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞"""
    await message.answer("‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")


@router.message(OperatorStates.operator_typing)
async def handle_operator_reply(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()
    user_id = data['target_user_id']

    if user_id not in user_questions:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
        await state.clear()
        return

    try:
        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=user_id,
            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}\n\n"
                 f"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–Ω–æ–≤–∞."
        )

        #–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
        question_data = user_questions[user_id]
        await bot.edit_message_text(
            chat_id=Config.SUPPORT_TEAM_CHAT_ID,
            message_id=question_data['support_msg_id'],
            text=f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{question_data['username']}\n"
                 f"üë§ –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n{question_data['question']}\n\n"
                 f"üì© –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        )

        #–£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–ø—Ä–æ—Å–µ
        del user_questions[user_id]

        #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (—Ç–æ–ª—å–∫–æ –µ–º—É, –Ω–µ –≤ –≥—Ä—É–ø–ø—É)
        await message.answer(
            f"‚úîÔ∏è –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{question_data['username']}",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: "
        if "bot was blocked" in str(e).lower():
            error_msg += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
            # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            if user_id in user_questions:
                question_data = user_questions[user_id]
                await bot.edit_message_text(
                    chat_id=Config.SUPPORT_TEAM_CHAT_ID,
                    message_id=question_data['support_msg_id'],
                    text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n\n"
                         f"üë§ –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n{question_data['question']}",
                    reply_markup=None
                )
                del user_questions[user_id]
        elif "chat not found" in str(e).lower():
            error_msg += "—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            error_msg += str(e)

        await message.answer(error_msg)

    await state.clear()