from aiogram import Router, types, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import Config
from .states import OperatorStates
from utils import load_texts

TEXTS = load_texts()
router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_questions = {}


@router.message(F.text == TEXTS["buttons"]["operator"])
async def request_operator(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OperatorStates.waiting_question)
    await state.update_data(start_time=message.date.timestamp())


@router.message(OperatorStates.waiting_question)
async def process_user_question(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    wait_time = int(message.date.timestamp() - data['start_time'])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_questions[message.from_user.id] = {
        "question": message.text,
        "start_time": data['start_time']
    }

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    username = message.from_user.username or f"ID: {message.from_user.id}"

    msg = await bot.send_message(
        chat_id=Config.OPERATOR_CHAT_ID,
        text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n"
             f"üë§ –û—Ç: @{username} (ID: {message.from_user.id})\n"
             f"‚è± –û–∂–∏–¥–∞–ª: {wait_time} —Å–µ–∫.\n"
             f"‚úâÔ∏è –í–æ–ø—Ä–æ—Å: {message.text}\n\n"
             f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        reply_markup=types.ForceReply(selective=True)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —Å–≤—è–∑–∏
    await state.update_data(operator_message_id=msg.message_id)

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    await state.set_state(OperatorStates.user_waiting)


@router.message(OperatorStates.user_waiting)
async def notify_user_waiting(message: types.Message):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞"""
    await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")


@router.message(
    F.reply_to_message,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    F.from_user.id == Config.OPERATOR_CHAT_ID,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    F.reply_to_message.from_user.id == Config.BOT_ID  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
)
async def handle_operator_reply(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    original_text = message.reply_to_message.text

    # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = None
    for line in original_text.split('\n'):
        if line.startswith("üë§ –û—Ç: @") and "(ID:" in line:
            user_id = int(line.split("(ID:")[1].split(")")[0].strip())
            break

    if not user_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì© –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        if user_id in user_questions:
            del user_questions[user_id]

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")